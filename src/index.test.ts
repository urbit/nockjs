import { jam, cue } from "./serial";
import bits from "./bits";
import { dwim } from "./noun-helpers";
import { Atom, Cell, Noun } from "./noun";
import compiler from "./compiler";
import { bigIntFromStringWithRadix } from "./bigint";
import { NounMap } from "./hamt";

function areNounsEqual(a: unknown, b: unknown): boolean | undefined {
  const isANoun = a instanceof Atom || a instanceof Cell;
  const isBNoun = b instanceof Atom || b instanceof Cell;

  if (isANoun && isBNoun) {
    return a.equals(b);
  } else if (isANoun === isBNoun) {
    return undefined;
  } else {
    return false;
  }
}

//NOTE  for some reason, this function isn't in the ts defs yet
(expect as any).addEqualityTesters([areNounsEqual]);

//  Follow ports of all tests from frodwith/nockjs in /test folder.
// bits.js
test("bits", () => {
  const ok = [...Array(10000)].reduce((acc, a, i) => {
    const tom = Atom.fromInt(i);
    const bytes = bits.atomToBytes(tom);
    const words = bits.atomToWords(tom);
    const bytesToTom = bits.bytesToAtom(bytes);
    const wordsToTom = bits.wordsToAtom(words);
    const gud = tom.equals(bytesToTom) && tom.equals(wordsToTom);
    return gud ? acc : false;
  }, true)
  expect(ok).toBeTruthy()
})
//  ack.js
test("ack", () => {
  const hex =
    "6eca1c00a1bac286c86483dc21dc324164dbf18777e361a371d5186b441bf187fe30f5b1b0bc071d5186b441bf1870028700287bb287d612eb0a1b21920e2aa1b26ce8a1af7086c8648384a86bdc21b21920c00a1e6364278c2598964324180143986482c9abdc21b21920b47a87df8db85d87484cc2e109efc6dc2ec38b4e2c9afc37e30ef8971b2b23c071e8e6c2cdf0168837e30f2643241f213dc21b9421b21920f1097ea13225b85d876266164dc5937bf1b26e2d8b26bf0b8b26eb63616bf818bf0b041";
  const pill = Atom.fromString(hex, 16);
  const formula = cue(pill);
  const woJet = new compiler.Context();
  let jetCalled = false;
  const getSample = Atom.fragmenter(dwim(6))
  const jet = (core: Noun) => {
    jetCalled = true;
    return bits.dec(getSample(core));
  }
  const subject = dwim(2, 2);
  const subject2 = dwim(3, 9)
  const unjetted = woJet.nock(subject, formula as any);
  const formula2 = cue(pill);
  const withJet = new compiler.Context(["kack", null, [["dec", jet]]] as any);
  const jetted2 = withJet.nock(subject2, formula2 as any);
  expect(unjetted).toEqual(Atom.fromInt(7))
  expect(jetted2).toEqual(Atom.fromInt(4093))
  expect(jetCalled).toBeTruthy();
});
// add.js
test("add", () => {
  const hex =
    "829878621bce21b21920c888730c9059367e61cfcc39f98721920f9099110dd6986c86483c425fa84c8886dc2ec3b1330b26e2c9b478d937168f1b26e4e1887ab8e61b213c612cc4b21920fc4dc324164d5912c86483a425c21362dc2ec38b4e2c9ae2b041";
  const pill = Atom.fromString(hex, 16);
  const formula = cue(pill);
  const con = new compiler.Context();
  const randInt = () => Math.floor(Math.random() * 100);
  const tries = [...Array(100)].reduce(
    (acc, _) => {
      const a = randInt(),
        b = randInt();
      const subject = dwim(a, b);
      const n = Number((con.nock(subject, formula as any) as Atom).number);
      const j = a + b;
      const nock = [...acc.nock, n];
      const js = [...acc.js, j];
      return { nock, js };
    },
    { nock: [], js: [] }
  );
  expect(tries.nock).toStrictEqual(tries.js);
});
// // serial.js
test("jamming and cueing", () => {
  // examples
  const toJam = [dwim(42), dwim("foo", "bar")];
  const jammed = toJam.map((a) => jam(a));
  const toCue = [dwim(5456), Atom.fromString("1054973063816666730241")];
  const cued = toCue.map((a) => cue(a));
  const hex =
    "829878621bce21b21920c888730c9059367e61cfcc39f98721920f9099110dd6986c86483c425fa84c8886dc2ec3b1330b26e2c9b478d937168f1b26e4e1887ab8e61b213c612cc4b21920fc4dc324164d5912c86483a425c21362dc2ec38b4e2c9ae2b041";
  const addPill = new Atom(bigIntFromStringWithRadix(hex, 16));
  expect(jammed).toStrictEqual(toCue);
  expect(cued).toStrictEqual(toJam);
  expect(jam(cue(addPill)).equals(addPill)).toBeTruthy();
  // generative
  let good = true;
  for (let i = 0; i < 1000; i++) {
    const atom = dwim(i);
    const j = jam(atom);
    const c = cue(j);
    if (!atom.equals(c)) good = false;
  }
  expect(good).toBeTruthy();
});
test("cue list of 100 items", () => {
  const hex =
    "2c9c1c7c1c5c1c3c1c1c1bfc1bdc1bbc1b9c1b7c1b5c1b3c1b1c1afc1adc1abc1a9c1a7c1a5c1a3c1a1c19fc19dc19bc199c197c195c193c191c18fc18dc18bc189c187c185c183c181c1fe83f507da0f941ee83d5079a0f141de83b5075a0e941ce8395071a0e141be837506da0d941ae8355069a0d1419e8335065a0c9418e8315061a0c141fb07cc1eb078c1db074c1cb070c1bb06cc1ab068c19b064c18b060c1f20f107483841b20d106483041f8761b8661d0c8719";
  const pill = Atom.fromString(hex, 16);
  const formula = cue(pill);
  expect(true).toBeTruthy();
});
test("cue list of 1000 items", () => {
  const hex =
    "5f4281f9d40fcca07e5503f2281f8d40fc4a07e1503f0281f7d40fbca07dd503ee281f6d40fb4a07d9503ec281f5d40faca07d5503ea281f4d40fa4a07d1503e8281f3d40f9ca07cd503e6281f2d40f94a07c9503e4281f1d40f8ca07c5503e2281f0d40f84a07c1503e0281efd40f7ca07bd503de281eed40f74a07b9503dc281edd40f6ca07b5503da281ecd40f64a07b1503d8281ebd40f5ca07ad503d6281ead40f54a07a9503d4281e9d40f4ca07a5503d2281e8d40f44a07a1503d0281e7d40f3ca079d503ce281e6d40f34a0799503cc281e5d40f2ca0795503ca281e4d40f24a0791503c8281e3d40f1ca078d503c6281e2d40f14a0789503c4281e1d40f0ca0785503c2281e0d40f04a0781503c0281dfd40efca077d503be281ded40ef4a0779503bc281ddd40eeca0775503ba281dcd40ee4a0771503b8281dbd40edca076d503b6281dad40ed4a0769503b4281d9d40ecca0765503b2281d8d40ec4a0761503b0281d7d40ebca075d503ae281d6d40eb4a0759503ac281d5d40eaca0755503aa281d4d40ea4a0751503a8281d3d40e9ca074d503a6281d2d40e94a0749503a4281d1d40e8ca0745503a2281d0d40e84a0741503a0281cfd40e7ca073d5039e281ced40e74a07395039c281cdd40e6ca07355039a281ccd40e64a073150398281cbd40e5ca072d50396281cad40e54a072950394281c9d40e4ca072550392281c8d40e44a072150390281c7d40e3ca071d5038e281c6d40e34a07195038c281c5d40e2ca07155038a281c4d40e24a071150388281c3d40e1ca070d50386281c2d40e14a070950384281c1d40e0ca070550382281c0d40e04a070150380281bfd40dfca06fd5037e281bed40df4a06f95037c281bdd40deca06f55037a281bcd40de4a06f150378281bbd40ddca06ed50376281bad40dd4a06e950374281b9d40dcca06e550372281b8d40dc4a06e150370281b7d40dbca06dd5036e281b6d40db4a06d95036c281b5d40daca06d55036a281b4d40da4a06d150368281b3d40d9ca06cd50366281b2d40d94a06c950364281b1d40d8ca06c550362281b0d40d84a06c150360281afd40d7ca06bd5035e281aed40d74a06b95035c281add40d6ca06b55035a281acd40d64a06b150358281abd40d5ca06ad50356281aad40d54a06a950354281a9d40d4ca06a550352281a8d40d44a06a150350281a7d40d3ca069d5034e281a6d40d34a06995034c281a5d40d2ca06955034a281a4d40d24a069150348281a3d40d1ca068d50346281a2d40d14a068950344281a1d40d0ca068550342281a0d40d04a0681503402819fd40cfca067d5033e2819ed40cf4a06795033c2819dd40ceca06755033a2819cd40ce4a0671503382819bd40cdca066d503362819ad40cd4a06695033428199d40ccca06655033228198d40cc4a06615033028197d40cbca065d5032e28196d40cb4a06595032c28195d40caca06555032a28194d40ca4a06515032828193d40c9ca064d5032628192d40c94a06495032428191d40c8ca06455032228190d40c84a0641503202818fd40c7ca063d5031e2818ed40c74a06395031c2818dd40c6ca06355031a2818cd40c64a0631503182818bd40c5ca062d503162818ad40c54a06295031428189d40c4ca06255031228188d40c44a06215031028187d40c3ca061d5030e28186d40c34a06195030c28185d40c2ca06155030a28184d40c24a06115030828183d40c1ca060d5030628182d40c14a06095030428181d40c0ca06055030228180d40c04a060150300281ff981ff181fe981fe181fd981fd181fc981fc181fb981fb181fa981fa181f9981f9181f8981f8181f7981f7181f6981f6181f5981f5181f4981f4181f3981f3181f2981f2181f1981f1181f0981f0181ef981ef181ee981ee181ed981ed181ec981ec181eb981eb181ea981ea181e9981e9181e8981e8181e7981e7181e6981e6181e5981e5181e4981e4181e3981e3181e2981e2181e1981e1181e0981e0181df981df181de981de181dd981dd181dc981dc181db981db181da981da181d9981d9181d8981d8181d7981d7181d6981d6181d5981d5181d4981d4181d3981d3181d2981d2181d1981d1181d0981d0181cf981cf181ce981ce181cd981cd181cc981cc181cb981cb181ca981ca181c9981c9181c8981c8181c7981c7181c6981c6181c5981c5181c4981c4181c3981c3181c2981c2181c1981c1181c0981c0181bf981bf181be981be181bd981bd181bc981bc181bb981bb181ba981ba181b9981b9181b8981b8181b7981b7181b6981b6181b5981b5181b4981b4181b3981b3181b2981b2181b1981b1181b0981b0181af981af181ae981ae181ad981ad181ac981ac181ab981ab181aa981aa181a9981a9181a8981a8181a7981a7181a6981a6181a5981a5181a4981a4181a3981a3181a2981a2181a1981a1181a0981a01819f9819f1819e9819e1819d9819d1819c9819c1819b9819b1819a9819a18199981991819898198181979819718196981961819598195181949819418193981931819298192181919819118190981901818f9818f1818e9818e1818d9818d1818c9818c1818b9818b1818a9818a1818998189181889818818187981871818698186181859818518184981841818398183181829818218181981811818098180181ff103fc207f440fe081fb103f4207e440fc081f7103ec207d440fa081f3103e4207c440f8081ef103dc207b440f6081eb103d4207a440f4081e7103cc2079440f2081e3103c42078440f0081df103bc2077440ee081db103b42076440ec081d7103ac2075440ea081d3103a42074440e8081cf1039c2073440e6081cb103942072440e4081c71038c2071440e2081c3103842070440e0081bf1037c206f440de081bb10374206e440dc081b71036c206d440da081b310364206c440d8081af1035c206b440d6081ab10354206a440d4081a71034c2069440d2081a3103442068440d00819f1033c2067440ce0819b103342066440cc081971032c2065440ca08193103242064440c80818f1031c2063440c60818b103142062440c4081871030c2061440c208183103042060440c0081ffc1fdc1fbc1f9c1f7c1f5c1f3c1f1c1efc1edc1ebc1e9c1e7c1e5c1e3c1e1c1dfc1ddc1dbc1d9c1d7c1d5c1d3c1d1c1cfc1cdc1cbc1c9c1c7c1c5c1c3c1c1c1bfc1bdc1bbc1b9c1b7c1b5c1b3c1b1c1afc1adc1abc1a9c1a7c1a5c1a3c1a1c19fc19dc19bc199c197c195c193c191c18fc18dc18bc189c187c185c183c181c1fe83f507da0f941ee83d5079a0f141de83b5075a0e941ce8395071a0e141be837506da0d941ae8355069a0d1419e8335065a0c9418e8315061a0c141fb07cc1eb078c1db074c1cb070c1bb06cc1ab068c19b064c18b060c1f20f107483841b20d106483041f8761b8661d0c8719";
  const pill = Atom.fromString(hex, 16);
  const formula = cue(pill);
  expect(true).toBeTruthy();
});
test("cue ~5kb jam", () => {
  const hex =
    "6558c3ab187179c38000000d3499281a9ad40000000000000100331ae1073262106acd932d21070000001a697f6ca5b1a9fbe76c8b43940200823565c600000034d2fed94bd5d00000000000000400c11f0696873f80ab558c382359b7805a60402cb35630e2f3870000001a68ebb427b97000000000000002006983f86b3179c38000000d34b7c1505c610000000000000100340be86b3179c38000000d34b797fe02c9000000000000010033e1686b558c38bce1c000000699fe40c4eff780000000000000801b6b74359b4400000069a627ba80e300000000000000080197430000001a698ef19c374e0000000000000200673386b5558c38bce1c000000699fd96109f5a00000000000000801b0c343562f3870000001a68433c714f1400000000000002006639f86ac5e70e00000034cfec88f6ceb80000000000000400d8dfa1abf987c3ad0be1ad58c38bce1c000000699fd83ddace480000000000000801c8cf4357f30f87e7fb0d6ab187f987c3f0b586ac5e70e00000034d294c79959940000000000000400c632c35ab187179c38000000d33fb07bb59da00000000000001003766e86ac5e70e00000034cfec1eed69300000000000000400e3cba1ab179c38000000d3475d608ee0f0000000000000100332dbc3562f3870000001a6922e35cb49400000000000002007394786ac5e70e00000034d2a9e0a102400000000000000400f6c2c35ab187179c38000000d33fae999e1690000000000000100381be86b5630e2f3870000001a6949e90f896e00000000000002007a6961ab179c38000000d33fb07bb59cd000000000000010036a6e86b5630e2f3870000001a67f674c2d86200000000000002006bd161acd58c3d10000001a6993bc33495e0000000000000200600000034d32765207ed80000000000000400b3a18000000d34c9ed31d9c6000000000000010031ddc35ab187642b2041b2e30000001a6977703cb8ca0000000000000200727761ad58c38bce1c00000069a508f892a4680000000000000801ed490d5fcc3e1e288f0d67f30f871f2b0d58bce1c000000699fd83ddace780000000000000801bcb7435ab1875c400000069a5e7f87b2568000000000000080196e18000000d34c778d127fa000000000000010037cdc35ab187179c38000000d33fb07bb59ce00000000000001003852e86ac5e70e00000034cfec1eed676c0000000000000400d9f3a1ab67f73f0d9718000000d34c4f429616f000000000000010034ddc3562f3870000001a679957785d620000000000000200710bd0d662f387bd321b34b3c3562f3870000001a67f64f173f2000000000000002006e45d0d58bce1c00000069a4b5b1debe580000000000000801b307e1ab5630ed4bf874573c39b4a1e1b6893c3665a60fe1ace2d0f0e817d0d671687873e1686b558c3b913e1db5ba1acdd16f0e73386b5558c3b913e1d861a1ab6a5fc3b11f439b4a1e1b6893c366598e7e1ab7227c3b1bf4356d0c7875a17c35ab187a00bc3c8cf4356d4bf87b72b0f5b386da50f0db449e1b32f9fec35aac61d558c3def5e1f72cf0ee1efe1e673646b3b616a666b6c733b649e00e9daf0d5600000034d28fc89715810624dd2f1a9c0401cb8d577bd787c57fc3b780f8754281ff181cedce05cc8cac8dcca5ae0d2d0e6d0c8dccad2e4cc5acac26e605c6862cac25c6e6862ca5cc26e68625c5c72685c665c6c625c5c72645c665c686460645ed8eae6e6c2d85af0f2e6c6dedc5ac6eae4c6c2da5ae0cad0c4d2dc5eeccac8e4cad8d8d2dad05edadec65ce6cac6c2e0e6dcc2cac6ded8c2e8d2ced2c85c66c6f2dc5e5e74e6e0e8e8d01fc001d4a5e1ba873c35d3b1e1ab0000001a6949e7cd7ae147ae147ae1460200e5c6ad58c3def5e1efacf0eb85ff86dad8595c988f00b9991cd859991cd87f00e9daf0d5600000034d28fc8c4624dd2f1a9fbe76c0401cb8d56ac61f862c374987876567616d6920706165683e01001c0ce8a073b2b8351721a43c21a0a0b7ac381a2a3c29a423969c1831b0973198b09a971a1b3119973332331a17171899971a97191917171c191719971a19181917b63ab9b9b0b616bc3cb9b1b7b716b1bab931b0b696b832b43134b717bb32b23932b63634b6b417b6b7b19739b2b1b0b839b730b2b1b7b630ba34b3b4b21719b1bcb717979d39b83a3a3406f00072b3b0b6b49e01d6c6ded8c47805b2b734b63734be015600000034d28fdcb5e147ae147ae147ac0401cb8d56d51f86da99f0dcb91e1be16b0d5c419e1c632c35ab187a00bc3bb374356d4bf8776d7c39971e5d0d5b7c3e1ccb6f0d5c6c3e1ea685ae8e6cae9680e5c6d3970d56d4bf87981bc3b683e1b6893c3665ed8586b5630ee44f8781be86b5630ed4bf87b72b0e6d28786da24f0d997a6961ab7227c3b537435ab1876a5fc3a88587ad9c36d28786da24f0d996bd161acdd16f0e3bb86b5630ed4bf87895b0e6d28786da24f0d99727761ad58c3b52fe1eaf48736943c36d12786ccbda921ab6a5fc398cb439b4a1e1b6893c3665b64d8731a686c7970d59b52fe1c3c2c39b4a1e1b6893c36658f9586ada97f0eef5f876d07c36d12786ccb796e86b5630ee8b7877cdc35ab1876a5fc3b67fe1e4697267f80d0000001a669f0977c5bc0000000000000200600000034cd3e14d0db340000000000000400c000000699a7bae33c03800000000000008018000000d334f7334bee5000000000000010032cb852e86ada97f0eb58d0f5b386da50f0db449e1b5630d96cf9d0d5b52fe1ece6d28786da24f0d9969bb86ada97f0edc6f876943c36d12786ccb885e86b36a5fc3b11f43d6ce1b6943c36d12786ccb34b3c356d4bf875ac687391959db985c9c987f00da24f0d996e45d0d5ab18706321ef4c86ef4c86b92d5bdf0e72b6b4ba7c07a39b4b67c0665dcc8c8c4b595b5bd8db195dde8072e363cb86ab5630e2f387623e86b5630e2f3875b4e87c117c59c080558bce1eaf486ad58c3aca090fa39b2ba103837b7b60f005c71264366ac61c0dc870000001a692d6cbfd7de00000000000002006d6e436b42f86aeb670dd38e1b5630eb11f438f2e1afeca1bd8286ad78c376fe435e8e6cae85ae0deded83c03971ab5630f4ba43b28243e6e8e6caa840ccde40c8dcc2993c0171c4990d9ab18703721c00000069a3aeb8534350000000000000080185690da60fe1abad9c374e386d58c3b23632342d656d6f636c65777a01457bc363cb86bfb286f60a1ab5e30dab1870000001a68ebb2dc735200000000000002009e5c6abcdd1cd95d0b599bcb591b985b27806eccebe7020159ace990f198b198b13111de019a16e1ae389321b35630e06e438000000d34219c79fbd0000000000000010031c1e86cc73f0d6606e438000000d33fb319ae6bf00000000000001003179c3e8eade40e0cacad7f805996de1acc0dc870000001a67f66264b1a9fbe76c8b439402006d8f61b34b3c3575b386e9c70dab1875b26c3e5c6c7970d7a3ab796b832b2b5fe03971b1e5c35f2dd87cb8df0c586bfb286f60a1ab5e30ddbf90d6c47d0d5aab187b9bda5d1c1a5c98dcd959081bda591d5d1ccb5b9bdb1d095fc00e56c746974206f69647574732d6e6f6c74251f002e389321b35630f50fd0eac61ee6f69747069726373656420746168632d6c6172656e6567258f00395b1d1a5d081d185a18cb5b185c995b9959c94bc00b6d6e86b5630e06e438000000d33fb29d81363000000000000010036b721b618686aea1fa1d58c3dcded2e8e0d2e4c6e6cac840e6cac6dccae4cacccae44ade0072b63a34ba1039b2b1b732b932b332b912878016c6fd0d6ab187a87e875630f737b4ba3834b931b9b2b21039b5b7b7b1128f801cad8e8d2e840e6d6dedec44afc016ecdd0d5d43f43ab187b9bda5d1c1a5c98dcd959081c1a5dc97f80395b1d1a5d081c1a5dc94f802e3cba1aba87e875630f737b4ba3834b931b9b2b21039ba3730b933969696b9b137b51696b9b3b734b732b83830b41297c0072b63a34ba1039ba3730b933969696b9b137b51696b9b3b734b732b83830b412ff8017233d0d6ac61ea1fa1d58c3dcded2e8e0d2e4c6e6cac840e8e4dee0e0eae64a7e0072b63a34ba103a3937b8383ab992df005c0df4359d43f43ab187b9bda5d1c1a5c98dcd95908185a59195b4947c00e56c74697420616964656d257e00b6a6e86b55630f50fd0eac61ee6f697470697263736564206f742d776f68252f00395b1d1a5d081bdd0b5ddbda0967802e14ba1aba87e875630f737b4ba3834b931b9b2b21033b7b6311287801cad8e8d2e840ceded8c44abc016cf9d0d5d43f43ab187b9bda5d1c1a5c98dcd959081cd95d18591c1d4b5adc9bdddd195b8b4b4b5cd95cd8595b195c894de00395b1d1a5d081cd95d18591c1d4b5adc9bdddd195b8b4b4b5cd95cd8595b195c8941e002de5ba1aba87e875630f737b4ba3834b931b9b2b21039ba3732b6b2b1b73ab7b73730969696b9bbb2b71283c0072b63a34ba1039ba3732b6b2b1b73ab7b73730969696b9bbb2b712d7801710bd0d581b90e00000034cfec1eed67200000000000000400d58c3dcded2e8e0d2e4c6e6cac840cae4cad05ae8e4c2e8e64ade0072b63a34ba1032b932b416ba3930ba3992878016e45d0d5d6ce1ba71c36ac61dcdd1b985c99cb4b4b5cd89bda8b4b5cd9db9a5b995c1c185a23c01cb8df0c586bc1a5dde072e37c3161af3746e656d65636e756f6e6e612d2d2d7377656e3f0072e363cb86bbdd0b5ddbda1f01cb8da72e1af4726f70707573bc072e363cb86bcd95d18591c1d4b5adc9bdddd195b8b4b4b5cd95cd8595b195ca7c01cb8da72e1af36b6f6f623c072e37c3161ae57265682d74726174733e01cb8da72e1af46168632d6c6172656e65677e01cb8d8f2e1ae16964656d3c072e37c3161ae76f6c62f81cb8da72e1af365636e6572656665723e01cb8df0c586b42dc3e5c6d3970d7f650dec14356bc61bb7f21aef69647574732d6e6f6c745e01cb8d59d2e90eca090e680d0d71c4990d9ab18703721c00000069a4fdd5bb0168000000000000080185690da05f435981b90e00000034d27eeb10e48c0000000000000400c5e70e7f3d0d67c2d0d5d6ce1ba71c36ac61d8999a9c96b2b6b7b1b632bbbd0098d34363cb86b95d1e5e04c69a1b1e5c35fd9437b050d5af186d58c38000000d349fbaedf5fe00000000000001004f2e355e4cae8e6cae8f8092d966e536f00b4df805674ba43b3a643e0d4c194c4dc8ed00cef02c35c71264366ac61c0dc870000001a678f3a651284000000000000020062f387de0b0d7b6161ad5630e06e438000000d336237cc3a8d00000000000001003179c3f2dd86be16b0d660c643e6f586c000000699a9d410fe1a000000000000008018bce1f592c35e9a586ac0dc870000001a66b1e6a37b645a1cac083126020062f387eafb0d7cff61abad9c3c7db761b0000001a66b1b3e9bd70a3d70a3d70a202006ac61e6736461743c036230d7eb961abad9c36e6f586fb6ec37b050d6ab187588c3dba586c7970d62f38795b5bdcfe02f4303775717a7c02cdbde5b1e06dd2c363cb86bb1859de06dd2c37830b2b47c05e6cae8dedc780dba586d3970d7f650dec14356def3e0dba586c7970d6d6e4377b518b1b8bd3e015af186d58c38000000d33c79f54110500000000000001004f2e355e4cad0e8dedcc3780a410dd7536f00b4df8056ac61d6504878a6b0d71c4990d9ab18703721c00000069a5ddbc406f40000000000000080185690dc9dd86aeb670dd38e1b5630ec4c8d4e4b595b5bd8db195dde8072e363cb86bfb286f60a1ab5e30ddbf90d7cb63634b99e03971ab558c3aca090f83ab7b933903734b6b230af005c71264366ac61c0dc870000001a67f674bc6f96000000000000020062f387cdb9a5b59185f00b5e8b0d5d6ce1ba71c36ac61d89a96b9b734b6b2308d00e5c6c7970d7f650dec14356bc61bb7f21af0756f72672d6e696d64615e01cb8d56b28243880d86b8e24c86cd58c381b90e00000034d294c605be340000000000000400c5e70e36961ac632c35981b90e00000034d294c5f0972c0000000000000400c2b486c7cac3575b386e9c70dab18770646c725acadadec6d8caeef403971b1e5c35e8cae6e8cae6f80e5c6d3970d7f650dec14356bc61bb7f21af4737465f81cb8d56b28243d6f90d71c4990d9ab18703721c00000069a363f71f8360000000000000080185690ded490d5d6ce1ba71c36ac61dc181c16b2b6b7b1b632bbad00e5c6c7970d7f650dec14356bc61b5630e000000341c2d440000000000000000000401ad9c37971aaf473657374736574fc072e355b4b431bc066e510e510e5108ed01c9c9c9c9c9c91da019ba8d71ab187b995c1bfe02cd58c381b90e00000034d2f3b953f0e00000000000000400c5e70e85b86b399c35981b90e00000034d2f3b968de000000000000000400c5e70e58b86b1ddc35ab18703721c00000069a5152e539fe00000000000000801ab1870b83ab7b933903bb2b710393ab7bc9037ba1032b6b7b1b632abce801cadadec6d8caaf7805be6e1ab63d8286c00000069a5153263e05800000000000008018bce1f4736574206b6f6f6265746f6e9e00b4ddc356ac61d88c35bb050d6ac61d99c191896b2b6b7b1b632bbbd0082363cb86bd1cd95d0b5adbdbd8995d1bdba780411be5c985a590f00bd1cd95d3e0411b1e5c35c9d1cd95d0d01046f4616863f80b5630e79b9b2b63737b4ba31b2a9af005e8d8eac2cccac978056ac61d5630f0ba30b230ba32b6903a34b232903237309039b632b73730b4319032bb37b6b2b91032373090323230903730b19039b734b6b220cfc007734b6b2209e017734b6b2309e015a600000034d28a977b46500000000000000401318b77ec336f00b4c040157932ba32b2bcbe023502805c055";
  const pill = Atom.fromString(hex, 16);
  const formula = cue(pill);
  expect(true).toBeTruthy();
});
// // hamt.js
test("maps work like maps", () => {
  const m = new NounMap();
  const num1 = Math.ceil(Math.random() * 1000);
  const num2 = Math.ceil(Math.random() * 1000);
  const num3 = Math.ceil(Math.random() * 1000);
  const atom1 = new Atom(BigInt(num1));
  const atom2 = new Atom(BigInt(num2));
  const atom3 = new Atom(BigInt(num3));
  m.insert(atom1, atom2);
  m.insert(atom3, atom1);
  expect(m.get(atom1).equals(atom2)).toBeTruthy();
  expect(m.get(atom3).equals(atom1)).toBeTruthy();
});
// // decrement.js
test("decrement", () => {
  const context = new compiler.Context();
  const formula = dwim(
    8,
    [
      1,
      8,
      [1, 0],
      [
        1,
        8,
        [1, 0],
        8,
        [
          1,
          8,
          [4, 0, 6],
          6,
          [5, [0, 62], 0, 2],
          [0, 14],
          9,
          2,
          [0, 6],
          [0, 2],
          0,
          15,
        ],
        9,
        2,
        0,
        1,
      ],
      0,
      1,
    ],
    8,
    [9, 2, 0, 1],
    9,
    2,
    [0, 4],
    [7, [0, 3], 1, 43],
    0,
    11
  );
  const product = context.nock(dwim(0), formula);
  expect(product.equals(dwim(42))).toBeTruthy();
});
